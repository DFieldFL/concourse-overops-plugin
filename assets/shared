#!/bin/bash

cd $1 # enter the build directory

function expand_param {
    if [ -z "$1" ]; then 
        return
    fi

    res=$(jq -er '.file' 2> /dev/null <<< $1)
    if [ "$?" -eq "0" ]; then
        cat "$res"
        return
    fi
    
    echo "$1"
}

input=$(cat) # read stdin JSON provided by Concourse

# Set parameters from the job level
OVEROPS_URL=$(jq -r '.params.overOpsURL | values' <<< $input)
OVEROPS_SID=$(jq -r '.params.overOpsSID | values' <<< $input)
OVEROPS_API_KEY=$(jq -r '.params.overOpsAPIKey | values' <<< $input)
OVEROPS_APPLICATION_NAME=$(jq -r '.params.applicationName | values' <<< $input)
OVEROPS_DEPLOYMENT_NAME=$(jq -r '.params.deploymentName | values' <<< $input)
OVEROPS_SERVICE_ID=$(jq -r '.params.serviceId | values' <<< $input)
OVEROPS_REGEX_FILTER=$(jq -r '.params.regexFilter | values' <<< $input)
OVEROPS_MARK_UNSTABLE=$(jq -r '.params.markUnstable | values' <<< $input)
OVEROPS_PRINT_TOP_ISSUES=$(jq -r '.params.printTopIssues | values' <<< $input)
OVEROPS_NEW_EVENTS=$(jq -r '.params.newEvents | values' <<< $input)
OVEROPS_RESURFACED_ERRORS=$(jq -r '.params.resurfacedErrors | values' <<< $input)
OVEROPS_MAX_ERROR_VOLUME=$(jq -r '.params.maxErrorVolume | values' <<< $input)
OVEROPS_MAX_UNIQUE_ERRORS=$(jq -r '.params.maxUniqueErrors | values' <<< $input)
OVEROPS_CRITICAL_EXCEPTION_TYPES=$(jq -r '.params.criticalExceptionTypes | values' <<< $input)
OVEROPS_ACTIVE_TIMESPAN=$(jq -r '.params.activeTimespan | values' <<< $input)
OVEROPS_BASE_LINE_TIMESPAN=$(jq -r '.params.baselineTimespan | values' <<< $input)
OVEROPS_MIN_VOLUME_THRESHOLD=$(jq -r '.params.minVolumeThreshold | values' <<< $input)
OVEROPS_MIN_ERROR_RATE_THRESHOLD=$(jq -r '.params.minErrorRateThreshold | values' <<< $input)
OVEROPS_REGRESSION_DELTA=$(jq -r '.params.regressionDelta | values' <<< $input)
OVEROPS_CRITICAL_REGRESSION_DELTA=$(jq -r '.params.criticalRegressionDelta | values' <<< $input)
OVEROPS_APPLY_SEASONALITY=$(jq -r '.params.applySeasonality | values' <<< $input)
OVEROPS_DEBUG=$(jq -r '.params.debug | values' <<< $input)

# Set global level parameters, if the local level ones where not set
OVEROPS_URL=$(expand_param "${OVEROPS_URL:-$(jq -r '.source.overOpsURL | values' <<< $input)}")
OVEROPS_SID=$(expand_param "${OVEROPS_SID:-$(jq -r '.source.overOpsSID | values' <<< $input)}")
OVEROPS_API_KEY=$(expand_param "${OVEROPS_API_KEY:-$(jq -r '.source.overOpsAPIKey | values' <<< $input)}")
OVEROPS_APPLICATION_NAME=$(expand_param "${OVEROPS_APPLICATION_NAME:-$(jq -r '.source.applicationName | values' <<< $input)}")
OVEROPS_DEPLOYMENT_NAME=$(expand_param "${OVEROPS_DEPLOYMENT_NAME:-$(jq -r '.source.deploymentName | values' <<< $input)}")
OVEROPS_SERVICE_ID=$(expand_param "${OVEROPS_SERVICE_ID:-$(jq -r '.source.serviceId | values' <<< $input)}")
OVEROPS_REGEX_FILTER=$(expand_param "${OVEROPS_REGEX_FILTER:-$(jq -r '.source.regexFilter | values' <<< $input)}")
OVEROPS_MARK_UNSTABLE=$(expand_param "${OVEROPS_MARK_UNSTABLE:-$(jq -r '.source.markUnstable | values' <<< $input)}")
OVEROPS_PRINT_TOP_ISSUES=$(expand_param "${OVEROPS_PRINT_TOP_ISSUES:-$(jq -r '.source.printTopIssues | values' <<< $input)}")
OVEROPS_NEW_EVENTS=$(expand_param "${OVEROPS_NEW_EVENTS:-$(jq -r '.source.newEvents | values' <<< $input)}")
OVEROPS_RESURFACED_ERRORS=$(expand_param "${OVEROPS_RESURFACED_ERRORS:-$(jq -r '.source.resurfacedErrors | values' <<< $input)}")
OVEROPS_MAX_ERROR_VOLUME=$(expand_param "${OVEROPS_MAX_ERROR_VOLUME:-$(jq -r '.source.maxErrorVolume | values' <<< $input)}")
OVEROPS_MAX_UNIQUE_ERRORS=$(expand_param "${OVEROPS_MAX_UNIQUE_ERRORS:-$(jq -r '.source.maxUniqueErrors | values' <<< $input)}")
OVEROPS_CRITICAL_EXCEPTION_TYPES=$(expand_param "${OVEROPS_CRITICAL_EXCEPTION_TYPES:-$(jq -r '.source.criticalExceptionTypes | values' <<< $input)}")
OVEROPS_ACTIVE_TIMESPAN=$(expand_param "${OVEROPS_ACTIVE_TIMESPAN:-$(jq -r '.source.activeTimespan | values' <<< $input)}")
OVEROPS_BASE_LINE_TIMESPAN=$(expand_param "${OVEROPS_BASE_LINE_TIMESPAN:-$(jq -r '.source.baselineTimespan | values' <<< $input)}")
OVEROPS_MIN_VOLUME_THRESHOLD=$(expand_param "${OVEROPS_MIN_VOLUME_THRESHOLD:-$(jq -r '.source.minVolumeThreshold | values' <<< $input)}")
OVEROPS_MIN_ERROR_RATE_THRESHOLD=$(expand_param "${OVEROPS_MIN_ERROR_RATE_THRESHOLD:-$(jq -r '.source.minErrorRateThreshold | values' <<< $input)}")
OVEROPS_REGRESSION_DELTA=$(expand_param "${OVEROPS_REGRESSION_DELTA:-$(jq -r '.source.regressionDelta | values' <<< $input)}")
OVEROPS_CRITICAL_REGRESSION_DELTA=$(expand_param "${OVEROPS_CRITICAL_REGRESSION_DELTA:-$(jq -r '.source.criticalRegressionDelta | values' <<< $input)}")
OVEROPS_APPLY_SEASONALITY=$(expand_param "${OVEROPS_APPLY_SEASONALITY:-$(jq -r '.source.applySeasonality | values' <<< $input)}")
OVEROPS_DEBUG=$(expand_param "${OVEROPS_DEBUG:-$(jq -r '.source.debug | values' <<< $input)}")

# setting version to the provided deployment name
VERSION_OUT="{\"deployment\": \"${OVEROPS_DEPLOYMENT_NAME}\"}"

# setting deploymentName to the resource version version
DEPLOYMENT=$(jq -r '.version.deployment // empty' <<< $input)
VERSION_IN='{}'
if [ -n "$DEPLOYMENT" ]; then
  VERSION_IN="{\"deployment\": \"$DEPLOYMENT\"}"
  OVEROPS_DEPLOYMENT_NAME=$DEPLOYMENT
fi

# prepare the execution cmd adding the cli parameter only if it was provided as Concourse job parameter
cmd="""
java -jar /artifact/concourse-overops.jar \
    ${OVEROPS_URL:+--overOpsURL=$OVEROPS_URL} \
    ${OVEROPS_SID:+--overOpsSID=$OVEROPS_SID} \
    ${OVEROPS_API_KEY:+--overOpsAPIKey=$OVEROPS_API_KEY} \
    ${OVEROPS_APPLICATION_NAME:+--applicationName=$OVEROPS_APPLICATION_NAME} \
    ${OVEROPS_DEPLOYMENT_NAME:+--deploymentName=$OVEROPS_DEPLOYMENT_NAME} \
    ${OVEROPS_SERVICE_ID:+--serviceId=$OVEROPS_SERVICE_ID} \
    ${OVEROPS_REGEX_FILTER:+--regexFilter=$OVEROPS_REGEX_FILTER} \
    ${OVEROPS_MARK_UNSTABLE:+--markUnstable=$OVEROPS_MARK_UNSTABLE} \
    ${OVEROPS_PRINT_TOP_ISSUES:+--printTopIssues=$OVEROPS_PRINT_TOP_ISSUES} \
    ${OVEROPS_NEW_EVENTS:+--newEvents=$OVEROPS_NEW_EVENTS} \
    ${OVEROPS_RESURFACED_ERRORS:+--resurfacedErrors=$OVEROPS_RESURFACED_ERRORS} \
    ${OVEROPS_MAX_ERROR_VOLUME:+--maxErrorVolume=$OVEROPS_MAX_ERROR_VOLUME} \
    ${OVEROPS_MAX_UNIQUE_ERRORS:+--maxUniqueErrors=$OVEROPS_MAX_UNIQUE_ERRORS} \
    ${OVEROPS_CRITICAL_EXCEPTION_TYPES:+--criticalExceptionTypes=$OVEROPS_CRITICAL_EXCEPTION_TYPES} \
    ${OVEROPS_ACTIVE_TIMESPAN:+--activeTimespan=$OVEROPS_ACTIVE_TIMESPAN} \
    ${OVEROPS_BASE_LINE_TIMESPAN:+--baselineTimespan=$OVEROPS_BASE_LINE_TIMESPAN} \
    ${OVEROPS_MIN_VOLUME_THRESHOLD:+--minVolumeThreshold=$OVEROPS_MIN_VOLUME_THRESHOLD} \
    ${OVEROPS_MIN_ERROR_RATE_THRESHOLD:+--minErrorRateThreshold=$OVEROPS_MIN_ERROR_RATE_THRESHOLD} \
    ${OVEROPS_REGRESSION_DELTA:+--regressionDelta=$OVEROPS_REGRESSION_DELTA} \
    ${OVEROPS_CRITICAL_REGRESSION_DELTA:+--criticalRegressionDelta=$OVEROPS_CRITICAL_REGRESSION_DELTA} \
    ${OVEROPS_APPLY_SEASONALITY:+--applySeasonality=$OVEROPS_APPLY_SEASONALITY} \
    ${OVEROPS_DEBUG:+--debug=$OVEROPS_DEBUG} \
    ${OVEROPS_CHECK:+--checkVersion=$OVEROPS_CHECK}
"""

if [ $OVEROPS_DEBUG == "true" ]; then
    1>&2 find .
    1>&2 echo ${input//$OVEROPS_API_KEY/***}
    # print the executed command without exposing the API Key
    1>&2 echo ${cmd//$OVEROPS_API_KEY/***}
fi
